# Generated by Django 3.2.7 on 2021-09-30 14:56

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import main.models
import partial_date.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('languages_plus', '0004_auto_20171214_0004'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Provide a user name', max_length=150, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(help_text='Enter your first name(s)', max_length=150, verbose_name='First name')),
                ('last_name', models.CharField(help_text='Enter your last name', max_length=150, verbose_name='Last name')),
                ('email', models.EmailField(help_text='Enter your email address', max_length=255, unique=True, verbose_name='Email')),
                ('email_confirmed', models.BooleanField(default=True, help_text='Has the user confirmed the email address?', verbose_name='Email confirmed')),
                ('is_staff', models.BooleanField(default=False, help_text='Does the user have staff status and can thus login to the admin page?', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Is the user active? Users get deactivated instead of deleted.', verbose_name='Active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date joined')),
                ('mark_anonymous', models.BooleanField(default=False, help_text='If selected, your documents will be published anonymously by default. Can be changed on a document basis.', verbose_name='Mark anonymous by default')),
                ('user_orcid', models.CharField(default='', help_text='User id from https://orcid.org/', max_length=255, verbose_name='Orcid')),
                ('notification_policy', models.IntegerField(choices=[(1, 'No notification E-Mails'), (2, 'Every time a subscribed document has changed.'), (3, 'Once a day, only if changes happened.'), (4, 'Once a week, only if changes happened.')], default=3, help_text='How often do you want to be notified about your subscribed documents?', verbose_name='Subscription Notification policy')),
                ('message_notification_policy', models.IntegerField(choices=[(1, 'No notification E-Mails'), (2, 'Every time a message is sent.'), (3, 'Once a day, only if you received messages.')], default=2, help_text='How often do you want to be notified about messages you receive?', verbose_name='Message Notification policy')),
                ('different_editor_subscription', models.BooleanField(default=True, help_text='Do you want to be notified when your documents were edited by another user?', verbose_name='Subscription to owned documents')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(help_text='Name of the author of the original document.', max_length=150, verbose_name='Name of author')),
                ('author_gnd', models.URLField(blank=True, help_text='Persistent URL to the GND entry of the author.', max_length=100, verbose_name='Link to GND entry')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='author_creator', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('last_update_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='author_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Document author',
                'verbose_name_plural': 'Document authors',
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('state', models.IntegerField(default=0)),
                ('sending_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(help_text='Complete name of the institution', max_length=80, unique=True, verbose_name='Institution')),
                ('street', models.CharField(help_text='Street with number', max_length=80, verbose_name='Street')),
                ('zip_code', models.IntegerField(help_text='Zip code', verbose_name='Zip code')),
                ('city', models.CharField(help_text='City', max_length=100, verbose_name='City')),
                ('country', django_countries.fields.CountryField(help_text='Country', max_length=2, verbose_name='Country')),
                ('site_url', models.URLField(blank=True, help_text='URL of the web site', verbose_name='Web site')),
                ('institution_utc_add', models.DateTimeField(auto_now_add=True)),
                ('institution_slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='institution_creator', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('last_update_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='institution_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_type', models.IntegerField(choices=[(1, 'Reference number'), (2, 'Document'), (3, 'User'), (4, 'Author'), (5, 'Institution'), (6, 'Source Type')])),
                ('object_id', models.BigIntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=250)),
                ('message', models.TextField()),
                ('viewing_state', models.IntegerField(default=0)),
                ('sending_time', models.DateTimeField(auto_now_add=True)),
                ('subscription', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.usersubscription')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=250)),
                ('message', models.TextField()),
                ('viewing_state', models.IntegerField(default=0)),
                ('sending_time', models.DateTimeField(auto_now_add=True)),
                ('receiving_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tc_msg_rec_user', to=settings.AUTH_USER_MODEL)),
                ('sending_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tc_msg_send_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, verbose_name='archivalienart')),
                ('parent_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_type', to='main.sourcetype', verbose_name='übergeordnete Archivalienart')),
            ],
            options={
                'verbose_name': 'Source type',
                'verbose_name_plural': 'Source types',
            },
        ),
        migrations.CreateModel(
            name='RefNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_number_name', models.CharField(help_text='reference number of the collection containing a document', max_length=100, verbose_name='Reference number')),
                ('ref_number_title', models.CharField(blank=True, help_text='Title of the collection', max_length=150, verbose_name='Title')),
                ('collection_link', models.URLField(blank=True, help_text='Link to the collection', verbose_name='Static URL')),
                ('ref_number_utc_add', models.DateTimeField(auto_now_add=True)),
                ('ref_number_slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ref_number_creator', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('holding_institution', models.ForeignKey(help_text='Institution associated with this reference number', on_delete=django.db.models.deletion.PROTECT, to='main.institution', verbose_name='Institution')),
                ('last_update_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ref_number_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'reference number',
                'verbose_name_plural': 'reference numbers',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.UUIDField(default=uuid.uuid1, editable=False, help_text='ID of the first Version of this document. Is kept constant between versions of this document.', verbose_name='Document UUID')),
                ('title_name', models.CharField(help_text='Title of the Document', max_length=200, verbose_name='Title')),
                ('doc_start_date', partial_date.fields.PartialDateField(help_text="When was the document written? Be as specific as possible. <br/>Valid fromats: YYYY ('1792'), MM.YYYY ('01.1980'), DD.MM.YYYY ('23.07.1643')", verbose_name='Creation period start')),
                ('doc_end_date', partial_date.fields.PartialDateField(blank=True, help_text="If the document was created over a time span, please indicate the end time. <br/>Valid fromats: YYYY ('1792'), MM.YYYY ('01.1980'), DD.MM.YYYY ('23.07.1643')", null=True, verbose_name='Creation period end')),
                ('place_name', models.CharField(help_text='The City/Place where the source was created.', max_length=150, verbose_name='Creation Location')),
                ('material', models.IntegerField(blank=True, choices=[(None, '(Unknown)'), (1, 'Paper'), (2, 'Parchment'), (3, 'Papyrus')], help_text='Is the manuscript on paper, papyrus or parchment?', null=True, verbose_name='Writing material')),
                ('measurements_length', models.DecimalField(blank=True, decimal_places=1, help_text='Height in centimeters (cm)', max_digits=5, null=True, verbose_name='Height')),
                ('measurements_width', models.DecimalField(blank=True, decimal_places=1, help_text='Width in centimeters (cm)', max_digits=5, null=True, verbose_name='Width')),
                ('pages', models.PositiveSmallIntegerField(blank=True, help_text='The number of pages of the whole source', null=True, verbose_name='Number of pages')),
                ('paging_system', models.IntegerField(blank=True, choices=[(None, '(Unknown)'), (1, 'Pagination'), (2, 'Foliated')], help_text='How are the pages numbered?', null=True, verbose_name='Pagination')),
                ('transcription_scope', models.TextField(help_text='List of the transcribed pages/chapters, etc.', verbose_name='Transcribed parts of the document')),
                ('comments', models.TextField(blank=True, help_text='Add editorial comments or remarks on the contents of the document.', verbose_name='Editorial comments')),
                ('transcription_text', ckeditor.fields.RichTextField(help_text='Formatted text of your transcript.', verbose_name='Transcript')),
                ('document_utc_add', models.DateTimeField(auto_now_add=True, verbose_name='Upload date')),
                ('document_utc_update', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('publish_user', models.BooleanField(default=False, help_text='Select this, if you want to publish this document anonymously', verbose_name='Publish anonymous')),
                ('document_slug', models.SlugField()),
                ('active', models.BooleanField(default=True, editable=False)),
                ('commit_message', models.CharField(default='initial', help_text='A brief description of the applied changes.', max_length=255, verbose_name='Changes')),
                ('version_number', models.IntegerField(default=1, help_text='Version number', verbose_name='version number')),
                ('seal', models.BooleanField(blank=True, help_text='Are there any seals on this page?', null=True, verbose_name='Seal')),
                ('illuminated', models.BooleanField(blank=True, help_text='Does the source contain painted miniatures (=illuminations)?', null=True, verbose_name='Illuminations')),
                ('author', models.ManyToManyField(blank=True, help_text='Authors, Copiers, Editors', null=True, to='main.Author', verbose_name='Source Participants')),
                ('language', models.ManyToManyField(blank=True, help_text='Languages used in the source', null=True, to='languages_plus.Language', verbose_name='Languages')),
                ('parent_ref_number', models.ForeignKey(help_text='Reference number of the source', on_delete=django.db.models.deletion.PROTECT, to='main.refnumber', verbose_name='Reference Number')),
                ('source_type', models.ForeignKey(help_text='Type of the source', on_delete=django.db.models.deletion.PROTECT, to='main.sourcetype', verbose_name='Source Type')),
                ('submitted_by', models.ForeignKey(editable=False, help_text='Uploading user', on_delete=django.db.models.deletion.PROTECT, related_name='contributions', to=settings.AUTH_USER_MODEL, verbose_name='Submitted by')),
            ],
            options={
                'verbose_name': 'document',
                'verbose_name_plural': 'documents',
                'get_latest_by': 'document_utc_add',
                'default_manager_name': 'objects',
            },
        ),
        migrations.AddConstraint(
            model_name='refnumber',
            constraint=models.UniqueConstraint(fields=('ref_number_name', 'holding_institution'), name='unique_ref_number'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(('active', True)), fields=('document_slug',), name='unique_active_slug'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(('active', True)), fields=('document_id',), name='unique_active_docid'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(fields=('document_id', 'version_number'), name='version_by_document'),
        ),
    ]
