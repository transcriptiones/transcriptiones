# Generated by Django 3.2 on 2021-04-07 15:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import main.models
import partial_date.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Provide a user name', max_length=150, unique=True, verbose_name='username')),
                ('first_name', models.CharField(help_text='Enter your first name(s)', max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(help_text='Enter your last name', max_length=150, verbose_name='last name')),
                ('email', models.EmailField(help_text='Enter your email address', max_length=255, unique=True, verbose_name='email')),
                ('email_confirmed', models.BooleanField(default=True, help_text='Has the user confirmed the email address?', verbose_name='email confirmed')),
                ('is_staff', models.BooleanField(default=False, help_text='Does the user have staff status and can thus login to the admin page?', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Is the user active? Users get deactivated instead of deleted.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('mark_anonymous', models.BooleanField(default=False, verbose_name='Mark anonymous by default')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(help_text='Name of the author of the original document.', max_length=150, verbose_name='Name of author')),
                ('author_gnd', models.URLField(blank=True, help_text='Persistent URL to the GND entry of the author.', max_length=100, verbose_name='Link to GND entry')),
            ],
            options={
                'verbose_name': 'Document author',
                'verbose_name_plural': 'Document authors',
            },
        ),
        migrations.CreateModel(
            name='DocumentPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seal', models.BooleanField(help_text='Are there any seals on this page?', null=True, verbose_name='Seal')),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(help_text='Complete name of the institution', max_length=80, unique=True, verbose_name='Institution')),
                ('street', models.CharField(help_text='Street with number', max_length=80, verbose_name='Street')),
                ('zip_code', models.IntegerField(help_text='Zip code', verbose_name='Zip code')),
                ('city', models.CharField(help_text='City', max_length=100, verbose_name='City')),
                ('country', django_countries.fields.CountryField(help_text='Country', max_length=2, verbose_name='Country')),
                ('site_url', models.URLField(blank=True, help_text='URL of the web site', verbose_name='Web site')),
                ('institution_utc_add', models.DateTimeField(auto_now_add=True)),
                ('institution_slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, verbose_name='archivalienart')),
                ('parent_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_type', to='main.sourcetype', verbose_name='체bergeordnete Archivalienart')),
            ],
            options={
                'verbose_name': 'Source type',
                'verbose_name_plural': 'Source types',
            },
        ),
        migrations.CreateModel(
            name='RefNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_number_name', models.CharField(help_text='reference number of the collection containing a document', max_length=100, verbose_name='Reference number')),
                ('ref_number_title', models.CharField(blank=True, help_text='Title of the collection', max_length=150, verbose_name='Title')),
                ('collection_link', models.URLField(blank=True, help_text='Link to the collection', verbose_name='Static URL')),
                ('ref_number_utc_add', models.DateTimeField(auto_now_add=True)),
                ('ref_number_slug', models.SlugField(unique=True)),
                ('holding_institution', models.ForeignKey(help_text='Institution associated with this reference number', on_delete=django.db.models.deletion.PROTECT, related_name='ref_numbers', to='main.institution', verbose_name='Institution')),
            ],
            options={
                'verbose_name': 'reference number',
                'verbose_name_plural': 'reference numbers',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.UUIDField(default=uuid.uuid1, editable=False, help_text='ID of the first Version of this document. Is kept constant between versions of this document.', verbose_name='Document UUID')),
                ('title_name', models.CharField(help_text='Title of the Document', max_length=200, verbose_name='Title')),
                ('doc_start_date', partial_date.fields.PartialDateField(verbose_name='Creation period start')),
                ('doc_end_date', partial_date.fields.PartialDateField(blank=True, verbose_name='Creation period end')),
                ('place_name', models.CharField(help_text='Entstehungsort der Quelle', max_length=150, verbose_name='entstehungsort')),
                ('material', models.CharField(blank=True, choices=[(None, '(Unknown)'), (1, 'Paper'), (2, 'Parchment'), (3, 'Papyrus')], help_text='Beschreibstoff', max_length=15, verbose_name='beschreibstoff')),
                ('measurements_length', models.DecimalField(blank=True, decimal_places=1, help_text='L채nge in cm', max_digits=5, null=True, verbose_name='l채nge')),
                ('measurements_width', models.DecimalField(blank=True, decimal_places=1, help_text='Breite in cm', max_digits=5, null=True, verbose_name='breite')),
                ('pages', models.PositiveSmallIntegerField(blank=True, help_text='Umfang der Quelle', null=True, verbose_name='anzahl Seiten')),
                ('paging_system', models.CharField(blank=True, choices=[(None, '(Unknown)'), (1, 'Pagination'), (2, 'Foliated')], help_text='Paginierungssystem', max_length=15, verbose_name='paginierung')),
                ('illuminated', models.BooleanField(help_text='Ist die Quelle illuminiert?', null=True, verbose_name='illuminiert')),
                ('transcription_scope', models.TextField(help_text='Liste der transkribierten Abschnitte/Seiten/Kapitel', verbose_name='transkribierte Teile des Dokuments')),
                ('comments', models.TextField(blank=True, help_text='Platz f체r editorische und inhaltliche Anmerkungen', verbose_name='editorische und inhaltliche Anmerkungen')),
                ('transcription_text', models.TextField(help_text='Transkription', verbose_name='transkription')),
                ('document_utc_add', models.DateTimeField(auto_now_add=True, verbose_name='upload date')),
                ('submitted_by_anonymous', models.BooleanField(default=False, help_text='Select this, if you want to publish this document anonymously', verbose_name='Anonymous')),
                ('document_slug', models.SlugField()),
                ('active', models.BooleanField(default=True, editable=False)),
                ('commit_message', models.CharField(default='initial', help_text='A brief description of the applied changes.', max_length=255, verbose_name='Changes')),
                ('version_number', models.IntegerField(default=1, help_text='Version number', verbose_name='version number')),
                ('author', models.ManyToManyField(blank=True, help_text='Autor*innen, Kopist*innen, Editor*innen', related_name='works', to='main.Author', verbose_name='beteiligte Personen')),
                ('parent_institution', models.ForeignKey(help_text='Institution, welche die Quelle aufbewahrt', on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='main.institution', verbose_name='Institution')),
                ('parent_ref_number', models.ForeignKey(help_text='Signatur der Quelle', on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='main.refnumber', verbose_name='Signatur')),
                ('source_type', models.ForeignKey(help_text='Archivalienart/Quellengattung', on_delete=django.db.models.deletion.PROTECT, to='main.sourcetype', verbose_name='archivalienart')),
                ('submitted_by', models.ForeignKey(editable=False, help_text='Benutzer*in, die/der diese Transkription eingereicht hat', on_delete=django.db.models.deletion.PROTECT, related_name='contributions', to=settings.AUTH_USER_MODEL, verbose_name='eingereicht durch')),
            ],
            options={
                'verbose_name': 'document',
                'verbose_name_plural': 'documents',
                'get_latest_by': 'document_utc_add',
                'default_manager_name': 'objects',
            },
        ),
        migrations.AddConstraint(
            model_name='refnumber',
            constraint=models.UniqueConstraint(fields=('ref_number_name', 'holding_institution'), name='unique_ref_number'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(active=True), fields=('document_slug',), name='unique_active_slug'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(active=True), fields=('document_id',), name='unique_active_docid'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(fields=('document_id', 'version_number'), name='version_by_document'),
        ),
    ]
